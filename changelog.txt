24-09-2022: Add main engine class and simple settings S/L.
25-09-2022: Add main graphic class and initialize Vulkan device.
30-09-2022: Add window surface and swap chain implementation.

01-10-2022: Create SwapChain image views, frame buffers, render pass (similar to the RT part of D3D12 PSO, command pool and buffer (similar to command list allocator and command list), and fence.
Also add a simple render loop for testing. I got some memory back when I was doing D3D12 stuffs!

02-10-2022: Create multi-frame sync and swapchain resize workflow. Add exclusive fullscreen toggling!
03-10-2022: Add raw input class and deal with input events. Add gametimer and simple FPS counter.
I also corrected the message loop, so the engine will run on full speed. (use PeekMessage instead of GetMessage)

04-10-2022: Start to add fbx importer and mesh class. Now meshes can be added successfully by per-vertex. Now it successfully import position/UV0/normal/tangents information.
05-10-2022: Implement a simple cache method for mesh I/O. So it doesn't need to import from raw assets every time, which could be slow!
Also added a config class, any settings I/O and applies should be there. From this change, I'll add utility functions in Utility.h

06-10-2022: Kick off DeferredShadingRenderer implementation. Also added a GraphicBuilder class for clean code. Added a render thread for rendering. Added a render texture class for managing VkImage/VkImageView/VkImageBuffer...etc

07-10-2022: Minor change for GameTimer class, stil choose performance counter timer. Added UHRenderResource for managing render textures. Added simple resource management in the engine.
The vertex buffer/index buffer creation is separated from Mesh class, they will be created in renderer. Now, both VB/IB are uploaded to GPU sucessfully.

11-10-2022: Kicked off the graphic state implemenation. The idea is to share the states as many as possible. Most state information are set properly. Started to compile HLSL shader in this change.
Shader compiled and loaded to Vulkan successfully. Next is to create graphic state for it.
This change also improves UHE_LOG.

12-10-2022: Added simple cache workflow for shaders, so it won't be compiled again if it wasn't changed at all. Download dxc.exe from GitHub instead of using the one in VulkanSDK.
Also added default materials. Added simple component management. Added a default scene and add mesh renderers to it. All getter member functions are end with "const" now.

13-10-2022: Switch custom type to DirectXMath. Start to implement transform class. Which simply store scale/position/rotation and return world/rotation matrix, forward vector for now.
Added simple property for material. Added camera implementation which is based on infinite far plane. Implemented simple update function as well. Use template implementation on UHRenderBuffer. Also implemented constant buffer behavior. All matrices are now tranposed before return.

14-10-2022: Define SAFE_RELEASE for all classes which have Release() function. Start to add object/material constants in this change. From now on, use std::array if size of array is known. Only use std::vector for dynamic cases. Added render dirty workflow, so constant buffer can be updated on proper times. Enhanced the Resize() workflow, it should reset properly now. Reference another dxc release 2022-07-18. This one provides dxil.dll. Use two dx commandlines for shader compiling.

15-10-2022: Set and get constant index when AddMeshRenderer. Also prepared Opaque/Translucent Renderers. Ready for sorting work. Enchanced the Release() functions, container also get cleared.
Simply sorted Opaque/Translucent based on Z-distance to camera. Arranged Init/Create/Release implementations of DeferredShadingRenderer to another cpp. Corrected FBX imported transformations, rename LocalXXX in mesh class to ImportedXXX.

16-10-2022: Start to create graphic states for renderers. Graphic state creation is failed due to HLSL shader (confirmed). Need to work on it. Fixed it!!!! Just add a space before " -spirv " and problem solved lol.
Enhance all FindXXXX vectors utility functions. Now it considers T and T*, so it can compare value and pointer correctly. Big progress today!

17-10-2022: Added scene depth image and image view. Creating RenderPass and FrameBuffer properly. Integrated CommandBuffer parameter of GraphBuilder to constructor, save the passing. Also started to create descriptor stuffs, so I can bind uniform buffer to rendering. Draw triangles successfully! But there are some ridiculous mesh inputs from test scene (2 millon triangles...), so FPS is dropped to 53.

18-10-2022: Fixed import bug of FBX, calling FbxGeometryConverter::Triangulate() and making sure all meshes are triangle-based. But this is a time-consuming opearation! Start to add debug labels of GPU events, so I can differensiate them in RenderDoc. Also change the exe file output directory and the name. Arranged the color attachment info to UHTransition info. Fixed engine resize bug! It was actually resize multiple times a frame. Separate swap chain pass to blit and present, currently no other way to transit it.

19-10-2022: Prepare to implement transition behavior. Implemennt simple ResourceBarrier, with unordered_map for mapping access flag and stage flag. Successfully to blit image from scene result to swapchain! Fixed View/Proj matrix bug, turns out they still need to be tranposed before multipication. Same for world matrix. Need to solve constant buffer issue, it's now use the first data only. Might need to create descriptors for all renderers instead of sharing it. Also apply unit scale to imported meshes, they're too big.

20-10-2022: Fixed descriptor binding, but rendering isn't fully correct. Imported meshes with unit scale and X-Axis -90 rotatoin. Fixed indices importing issue! But FPS is a tradegy now due to 2 million polys tree. Transformation is still wrong, consider using other FBX for test. Found a perfect test assets!! But full screen bug is appeared again. Fixed a thread issue, now main thread actually waits render thread to signal. Also fix camera view matrix.

21-10-2022: Define +Y as up but it still can work with Vulkan well. Flipped the up vector when creating ViewMatrix. Start to add other attributes in shader. Fix a transform typo. Fulfill basic Gbuffer output (without texture sampling). Started to add light pass. Added simply ini file I/O. Added simple engine settings (mainly for default camera).

22-10-2022: Created rendering buffers with a fix resolution instead of following window size. Started to add light component implementation. Added directional light buffer upload.

23-10-2022: Re-implement the mesh buffer creation, now it will follow the shading model settings. Re-implement the descriptor creation. It was really painful...Correct the register binding in the shader. Added shader include files caches. So modifiying shader includes will also trigger re-compiling. Enchance the calling of SetRenderDirties for light and material. Corrected the descriptor allocation, only sets need to follow GMaxFrameInFlight.

24-10-2022: Restructured the descriptor creation. Define UHDescriptorUsage enum for them. Now I can vary the register space in UH! Arranged a few "Request" functions of Graphic class, only UHRenderBuffer will not be managed by Graphic class since it's template-based. Started to implement sampler as well. Fixed bug of depth store, it was "don't care".. Also fixed a bug regarding material file, it was not R/W material constants at all!

25-10-2022: Restructured descriptor again! Each shader should contain the minimum descriptor set instead of sharing the table. Might consider integrating desciptor stuff in shader class. Added a helper class for descriptor writer, which made the workflow cleaner. Added BRDF calculation in the lighting pass! It's time to add texturing after this change.

26-10-2022: Minor changes to FBXImporter, when reading data like normal/uv/tangent. I'll always map them as eByControlPoint and reference as eDirect. Separated light parameters and constant, it was a mess. Added simple sky lighting. Restructured Texture class, which is painful but good for future. Added WIC texture importer as editor class, cache system is used too. Also arranged most file path stuffs.

27-10-2022: Added texture uploading flow, CPU data will be release right after uploading. Arranged initialization order, it won't show window until the initialization is done. Started to try importing material data from FBX.

28-10-2022: Separate matearial props and constants, one for CPU another for GPU, don't use them together! Imported used texture file name also, made it easier to map. Bound texture to material sucessfully. Ready for modifying rendering system for textures. Arranged all for loop usage, which was painful but good for future. Toggling GPU labeling feature in the setting, since it can reduce performance. Tried to upload the textures that are really used in rendering. Wrote texture to descriptor binding successfully. Moved device extenstions define to cpp instead of header. Added shader variable in material class. Wrote defines to cache as well. Added simple hash system for shader variants.

30-10-2022: Applied shader variants system. Now it can sample texture. However, anything besides control points are wrong. Need more R&D for FBX importer. Loaded FBX UV/Normal/Tangent successfully! Some conversions are needed, e.g. Invert UV.y. Also fixed normal and sky lighting bugs in the shader. Normal needs to be normalized before converting to [0,1]. And Up vector in sky lighting calculation doesn't need to convert to [0,1], otherwise it's always lit by sky. Imported bump scale as well.

31-10-2022: Added more texture calculation. For now simply consider opacity map as alpha test map. Finished the texture sampling in deferred pass! Fixed a few importing bugs. However UVs are still wrong sometimes.

01-11-2022: Fixed many bugs! The texture importing uses RGBA instead of BGRA now. Revisited FBX import again for AO map and real vertices. I found vertex buffer needs to be reconstructed based on UV element. Minor codestyle change, also added a UH coding rules document. Some meshes don't seem to be origin at (0,0,0), the renderer sorting could be incorrect. Considered mesh center for sort renderer as well.

02-11-2022: Added UHTextureInfo for creation, reduced lots of parameter passed to creation functions. Added UHSamplerInfo as well, it also has MaxLod parameter. Finished mip map generation. New a mateial holds sampler array too, each type of texture sampler is separated. Removed the shared LinearWrappedSampler, now the system should use the sampler from different texture type. Also maded resource barrier and blit operate on specific mip slice. Added a geometry utility header for creating built-in mesh. Started to add skybox renderer. Rethink the usage of UHRenderPassTypes and UHShadingModel enum. Arranged render pass objects massively. Started to add sky pass stuffs.

03-11-2022: Separated UHRenderpass/Descriptor object. It's really hard to arrange those stuffs without hating self..Added sky pass suceessully. Restructured the asset/cache folder output, they should maintain raw assets file structure. Also collect custom extension types in AssetPath.h. Arranged all DefaultXXX stuff to Scene.h, shouldn't be in Engine.h. Copy to texture cube successfully! Set anisotropic sampling as default option. But it seems to give me a false error about feature enable lol.

04-11-2022: Applied per-object env cube mapping. Also corrected a bug regarding roughness. Didn't notice the shiness import from FBX is ranged in [0..255]. Try to differentiate linear/srgb format when requesting texture. Arranged descriptor initialization again. Ready for adding post process workflow. Rethink descriptor write helper structure at the moment. Moved shader define stuffs to material, should be there.

05-11-2022: Added a UHShaderClass for high-level management of shader and its descriptor. Hopefully this makes initialization shorter. Massively reduces the smelly initialization code, they're initialized in where should make sense now! Reduced initialization code from 9xx lines to 4xx lines. Added the share usage of descriptor/pipeline layout in the shader class. Added tone mapping shader. Corrected shader subpath issue.

06-11-2022: Added file extension check for all .uhxxx. In case it's loading the wrong files. Added fresnel factor in material props. Added simple shared function for post processing.

07-11-2022: Started to add tone mapping shader implementation. Added jitter matrix for temporal effects. TAA worked! With motion issues. Will address it afterward. The TAA workflow also considered first-chance and resizing issues.

08-11-2022: Added motion vector pass for opaque objects. Started to address ghosting issue in TAA, and I'd choose velocity difference for Disocclusion. Added non-jittered matrix for use. Completed TAA 1st version. Arranged layout binding codes.

09-11-2022: Started to add ray tracing extension. Will try to build acceleration structures first. Integreated VB/IB buffer to UHMesh class.
Added raytracing feature check and modify create info in CreateLogicalDevice(). Added UHAccelerationStructure for managing AS. Building both bottom/top level structures successfully, need to test them in actual rendering.

10-11-2022: Started to add ray tracing shader implementation. Creating RT pipeline successfully. Added STORAGE_BIT for render texture when necessary. Built shader table for vk TraceRay call successfully. I can only debug RT result with debug view pass, RenderDoc can't catch it lol.

11-11-2022: Fixed the bug of ray tracing incomplete! All bottom level AS must be creaeted before initializing top level AS. Removed huge scale for skybox, shader calculation already dealt with it.

12-11-2022: Figured out how to generate ray for orthographic projection, suitable for non-negative near plane only. Ready for creating light matrix.

13-11-2022: Started to add light view/proj matrix. Started to sample shadow map, but it had issues. Found it was caused by weird matrix issue, consisting view/project light matrix would work. But separting them didn't..I must be a tired.

14-11-2022: Reverted orthographic ray shadows, I think screen space shadow still works better. Added sampler to debug view PS. Added PCSS shadow sampling! Despite there are a few hard-code stuffs. Renamed all GBuffer to a meaningful name. Added a UVGrad GBuffer for storing UV ddx/ddy. Now penumbra will be lerpped based on UVGrad, so distant pixels won't use high penumbra. Finialized RT shadow mapping. Enhanced debug view mode. Added simple game script management. Used material buffers as storage buffer instead of constant, it's ready for RT shaders accessing.

15-11-2022: Default material to masked if there is any opacity texture during import FBX. Added any hit shader, ready for brining in material buffer. Bind material buffer to hit group shader successfully! BindStorage() function adds the full range binding, otherwise only the first element in the StructuredBuffer would work. Enabled the descriptor indexing feature. Trying to deal with texture binding in RT. Minor change to UV gradient texture storage.

16-11-2022: Started to add VB/IB table binding for RT hit group shader. Bound both VB/IB successfully. Bound all necessary data to RT hit groups! Finalized RT shahdows, used vertex normal for offset ray instead. Added enable ray tracing setting in config file. Tried to build top level AS every frame, but it slowed down FPS a lot. Rebuild top level AS successfully, consider updating it in the future.

17-11-2022: Started to add per-object motion pass. Fixed shader cache bug if a shader uses different entry point in one file. Finalize the motion object pass and TAA issue for dynamic object is concluded! Optimized a few MathHelpers computation. Trying to add editor lol, removed resource.h out of UnheardEngine.h. Swtiching view mode in window menu succeed!

18-11-2022: Added metallic material texture type. Metallic textures are not loaded by FBX, I assign to material maually for test in game script. Removed CreateSwapChain call during initialization, since ResizeSwapChain will be called immediately afterward. Initialized setting window successfully. Fulfilled most editor setting. Fixed normal issue in RT, no need another vertex normal buffer. Fixed mesh normal issue, some of them have zero normal vector.

19-11-2022: Improved RT shadow sampling with depth diff check. Multiple lights test ok. Added roughness texture. Ready for documentation.

20-11-2022: Minor bug fixes.

22-11-2022: Improved TAA blurry by unjitter UV. Move PostProcessVS.hlsl under PostProcessing folder. Started to add more profiling in UHE.

23-11-2022: Arranged the dialog code. Added a new building configuration: Release_Editor, so it can have the similar performance to release build but keeps the editors.

24-11-2022: Kicked off the implementation of GPU timing. Implemented a GPUQuery class.

25-11-2022: Finished profile window for the moment. Added bEnableGPUTiming in the setting window.

26-11-2022: Minor performance and fix change for a few shaders.

27-11-2022: Added FPS Limit feature. Setting FPSLimit to 0 indicates no limit.

28-11-2022: Done both mesh and memory optimizations. For now, Input Assembly will have POSITION layout only. The other attributes like UV, Normal, Tangent are accessed via StructuredBuffer. Image and mesh memory are shared.

30-11-2022: Started to add depth prepass stuffs. Done! It's default to false, since current scene is small and can be benefit from depth pre pass. Also removed a few global variables in CoreGlobal.h. Minor constant optimization for vertex shader, it uses matrix WorldViewClip now for SV_POSITION instead of separating as world/viewclip.

01-12-2022: Started to add frustum culling. Added mesh bound and renderer bound. And of course the bound frustum in camera component. Enhanced the const correctness in codebase. From now on, rendering should only iterate visible renderers in a vector.

02-12-2022: Try to add ray tracing based occlusion test. Finished the RTOT implementation, it could be useful in some cases but further tests are needed. Fixed some serious bugs regarding texture index, didn't set them properly!

09-12-2022: Added parallel submission feature! Only apply to heavy rendering pass now. Create a UHThread class as thread wrapper.

21-12-2022: Arranged shader class implementation. Separated as header and cpp. Implemented BindParameters() function too.

29-12-2022: Minor change to resizing workflow. It won't resize GBuffers if resolution isn't changed now. And only resize the swapchain buffer.

03-01-2023: Started the implementation of material editor. For now there is only one material editor window, and can edit only one material at the same time. Select the material in list box for switching.

06-01-2023: Tried to add a few more UI controls for graph system. Added material inputs node in the graph successfully. Next I'd try to make it movable.

07-01-2023: Implemented node GUI class. Creating movable GUI successfully. But repainting is a problem. Dealt with repainting sucessfully! Turns out I have to invalidate rect of whole dialog...reminds me of those days in school when learning window programming lol.

08-01-2023: Added right mouse control in material graph for moving the working area.

09-01-2023: Added add node and delete node options in popup menu. Ready for adding more nodes functions in.

10-01-2023: Added parameter node (float/float2/float3/float4).

11-01-2023: Implemented a few "Add Node" functionality. The workflow is done and it's just to add more functions in the future.

13-01-2023: Tried to receive message when clicking on pins, ready for connection feature of node.

16-01-2023: Done the pin connection functionality. Including pin type check. The type must be assigned as enum during initialization of node and pin. Ready for drawing connection lines.

18-01-2023: Drawing the pin connection line successfully. Next is to handle node deletion and the radio button mark.

20-01-2023: Deal with radio button mark. Start to add delete note function. Improved InvalidateRect() call a bit.

22-01-2023: Finish node deletion. Still has a chance to cause flickering. Lower line drawing flickering. But controls will still flick after adding a certain number of them.

23-01-2023: Minor change to invalidation of window. Now the only flickers are from high number of win32 controls.

25-01-2023: Now the material GUI will be cleaned up if selected material is changed. Ready for syncing with material data. Fix a minor bug regarding mesh buffer. VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT is needed without ray tracing enabled.

29-01-2023: Start to add material translation to HLSL. Currently apply it to base pass only. Now it renders flat color properly. Next is to generate a default "graph" for materials and save in asset.

31-01-2023: Added math node GUI.

14-02-2023: Fixed swapchain initialization bug regarding full screen. I let driver do the work now.

16-02-2023: Added texture node GUI. Need to find a way to add scrollbar for drop down list.

19-02-2023: Finished texture node roughly. Ready to add save/load workflow for material graph.

22-02-2023: Always initialize material class with unique_ptr now, since it has to store graph node variables. Added simple versioning for material class.

06-03-2023: Generate default material graph nodes after import, which includes GUI relative position as well. Expose default parameter in graph nodes for use. Ready for syncing with material editor.

14-03-2023: Start to sync material nodes to editor. Expect it could initialize the proper GUIs. The value is sync to GUI as well. Ready to translate to HLSL based on the node information.
Separated Utility implementations.

15-03-2023: Start to translate graph nodes to HLSL. Every node will have EvalHLSL() for it.

08-04-2023: Start to add node HLSL code. Math node is tricky since it can use any type as input, I need to think a way for checking types. Solved by recurssive check.

13-04-2023: Completed node translation! Also adjusted descriptor, now UHE will create material descriptor that follows the texture usage in a material. Next is to apply the same rule for depth pre pass and motion shader pass.
Also I need to think of a way for release build, as the node data is editor only.

14-04-2023: Started to add compile button in material dialog. Fixed the correctness of releasing a shader. Graph translation succeed, need to refresh graphic states. Refreshing states done! Only texture isn't updated properly.
All issues are solved! The recompiling function is basically done.

17-04-2023: Added object management, mainly for referencing now.

18-04-2023: Added material compile flag. It will differensiate full compile and bind only now. Finish full compile and bind only refresh. Despite it's a bit smelly.

19-04-2023: Checked texture reference before refreshing material. Now they should always be uploaded to GPU before used. Finished node disconnection function, also arranged the enum used in WndProc, prevented use the same value as system ID.
Started to add implementation for saving materials. Saving material works partially, now it needs to save the default value of the node as well.

20-04-2023: Moved graph node classes to runtime. Added implemenation for node data I/O, mainly for default value.
Data works fine in editor build, now I have to figure out a way to deal with relase build data. Added simple fallback shader for material.
Next is to optimize the default graph node, don't give opacity if it's not alpha test object, and don't duplicate texture nodes.
Sovled the texture node duplication. I wonder if parameter node can be solved too...Yes I solved it!
Added shader cache for template as well.


21-04-2023: Minor optimization for alpha test and TAA jitter offsets.

24~26-04-2023: Minor bugfixes and code arrangement. Fix material editor issue.

27-04-2023: Smoothed the edge of TAA. Applied material shader rules to depth pass. ShaderClass code arrangement.
Added the macro hash to material shader as well. Enhanced the shader/materisl cache workflow.

28-04-2023: Improved material cache workflow. Improved compiling workflow. Fixed the flickering issue of RTOT when vsync is off.

01-06-2023: Fixed a RT bug caused by NVIDIA driver. The miss shader is a must-have now in binding. Let Release_Editor build asserts too.

08-06-2023: Set affinity for threads. Enhance delta time calculation and prevent a huge DT spike. Fixed an edge case for shader compilation, now compiling caused by include changes should be fine.

23-06-2023: Massively change the material pipeline. Now the rendering is bindless. Revert TAA motion diff to cutoff and always find the max motion length in 3x3 mask. The next is to apply material to ray tracing
And remove the old material data.

25-06-2023: Refactored material inputs, removed old data. Added SBT implementation for hit groups, now each material can have its own HG shader. Translated HG shaders successfully, but the indexing is a pain.
Finally I figured out a way to index. Almost ready for a new post. Need to refactor the RTOT and consider mip level calculation in hit group shader.

26-06-2023: Added material change to RTOT as well. Added mip level calculation for sampling in RT hit group.

27-06-2023: Fixed a minor bug about resizing, it should recreate GBuffers after resolution changed. Improved TAA by combining color clamping and motion rejection, I can also remove the depth texture sample in TAA.
Started to add compute shader support, another meaningful change!

TAA PS: 0.06ms @1080p
TAA CS: 0.06ms @1080p
TAA CS+Shared memory: 0.04ms @1080p (Improved!!)
ToneMapping PS: 0.014ms @1080p
ToneMapping CS: 0.020ms @1080p (Caused by constant buffer access)
Light PS: 0.06ms @1440p
Light CS: 0.056ms @1440p (slightly improved)
Light CS+Shared memory: 0.049ms @1440p (Improved!!)

28-06-2023: Did the experiments for per-vertex jitter offset. This improves distant object flickering, but can't completely erase them.
Current version TAA uses motion rejection + color clamping + per-vertex jitter scaling. This change also refactored the gpu timestamp query, more clean code.

02-07-2023: Minor changes, added a scoped version of UHProfiler.

04-07-2023: Kicked off a few CPU optimization. Modified the way to upload GPU buffer, now it uploads the whole buffer once instead individually.

05-07-2023: Making culling/sorting parallel as well. Fixed a stupid bug about thread affinity...now the performance is back to 900 FPS.

08-07-2023: Added save all materials button for convenience. Added cull mode toggling feature in material editor, it's another important change I can say.
Added blend mode toggling as well, this is more complicated than cull mode toggling.

10-07-2023: Started to add translucent pass stuff. This should be quicker as I've already got a stable workflow.
Also fixed another stupid bug when doing vector value lookup, the function parameter makes a copy and affects the UObject table, fixed it by using const& and prevented the copy.
Massively refactored the RequestReleaseShader() to deal with dangling pointer issue. Expose a inline T* SafeGetObjectFromTable(uint32_t Id) function.

11-07-2023: Make motion object pass in parallel as well for the worst case. Separated opaque/translucent motion pass, they need to be treated carefully.
Added translucent motion pass as well. Minor fix to transform component so that static objects still get their previous world info.

12-07-2023: Added the ability to receive ray tracing shadows for translucent objects, but they're hard shadows. I'll try separating a standalone "Soft shadow" pass.
Added soften pass right after RT shadows, now translucent can receive the shadow. But the penumbra needs to be improved.

13-07-2023: Added proper shadow casting for translucent objects! Also fixed a macro define bug in the motion object shader. Also removed the RTOT stuff and old material shader defines.
Almost ready for the post.

15-07-2023: Minor change to RT shadow. Applied vertex normal for opaque shadow receiving as well. Removed the normal texture sampling in RT shadow, it's weird to sample bump normal here.

16-07-2023: Changed the way to sort opaque renderers. Now I also sort them by material id, so the rendering can reduce the state change. Saved another 0.2ms!!

18-07-2023: Minor code refactoring. Stored another two vertex normal buffer for RT. Gave a huge scale to skybox renderer to prevent glitch when vsync is off.

19-07-2023: Fixed the FPS limiter bug. While loop method is more accuracy than sleep. Wrapped all command pools/buffers/fence/semaphore stuffs into a structure.

20-07-2023: Minor code refactoring in soft RT shadow compute shader, I messed some part of it. 
Did the first experiment of async compute, but the update top level acceleration structure is the only one that can be excuted async...
Fixed the glitch when Vsync is off! The key is to manually wait the presentation. Also enhanced some variables for GT/RT access.

21-07-2023: Exposed bEnableAsyncCompute in setting. Enhanced the async compute queue and scene render queue semaphore.

23-07-2023: Removed the auto import behavior in engine. Started to add texture editor, and also the preview scene class.

24-07-2023: Finished the texture preview, it's now very simple and does not include cube map yet. Next is to sync the sRGB / bIsNormal state and apply it to pipeline properly.

25-07-2023: Done the sRGB setting in texture editor, normal setting is the next. Done with normal setting toggling, removed the old stupid method to differensiate normals.
Removed the gamma texture old method as well. Added texture save feature.

27-07-2023: Integrated linear/normal setting into a UHTextureSetting struct. It can be used for other settings in the future too.
Also started to add texture creation feature. The 2D texture creation is done. The next is to do either texture compression or texture cube creation.

31-07-2023: Kicked off the block compression implementation. Started from BC1. Looks like I'm on the right track, but the result is noisy.
This is caused by the min/max value. Need a better way for selecting reference color.

01-08-2023: Sync compression setting to texture editor. Stored mip map data in file successfully! Ofc the asset size is larger now.
Compression for the mip map also works well. Texture now stores version and raw source file path. Next is to deal with the block compression (quailty and memory binding stuffs)
, texture list update in material editor after texture creation, and texture editor resizing.

02-08-2023: Continue working on the texture compression. Refactored the RequestTexture2D function as well. In editor, image memory request will always use uncompressed format.
Added texture type for future use. Fully understood how block compression works, but calculating a good color reference is a nightmare!

03-08-2023: Realized I stored the indices in a wrong order for BC1! It should be from LSB anyway.

04-08-2023: Start other testing for choosing the best pair of reference color for BC1. Luminance min/max seems working, but it's not the best method.
Tried the closest line search method, looks promising! Consider to fix the length at 255. There is only a few noises in the image, I have to think about them.

05-08-2023: Discovered that the closest line method won't always work. So adding min/max method as a comparotor, choose the method that gives the smallest difference.

06-08-2023: Multi-threaded the block compression. Adjusted TAA parameter again. Apply the unused texture to proper material.

07-08-2023: Added a simple status text dialog for heavy tasks. Started adding high level implementation for managing GUI.
Started applying high level control to dialog...painful!

08-08-2023: Applied high level GUI class to texture editor too. Wrapped std::bind std::unique_ptr std::make_unique calls. Fixed the memory leak caused by lack of virtual destructor for UHGraphNode.
The material editor is the final one to apply high level class...painful!

09-08-2023: Refactored material gui controls. Found the roughness difference between base and translucent pass, need to address it. Fixed the indirect specular issue, I forgot adding result in the end of light compute shader.
Add size parameter to UploadAllData() function. Enhanced memcpy safety by using memcpy_s instead.
Finally refactored all GUIs used in editors.

10-08-2023: Reduced the flickering when dragging a pin line in material editor.

13-08-2023: Improved GUI flickering when dragging a single node in material editor. Spent too much time on the GUIs..next is to add point/spot light implemenation.

22-08-2023: Started adding point light implementation. Finished adding the point light components.

23-08-2023: Added point light calculation in the base pass shader.

24-08-2023: Started adding point light culling shader.

25-08-2023: Started adding point light tile buffers on C++ side. Also started applying culling results. Implementation works well. Gave up the frustum box-sphere intersection as I want to keep point light per tile as low as possible.
The feature is finished, next is to try async compute and doing culling at half resolution.

27-08-2023: Continued optimizing light culling pass. Applied point light to translucent objects. Fixed specular highlight issue. Fixed tangent space editor bug.

28-08-2023: Finished adding point light RT shadow. But need to address the white artifact (again!)

29-08-2023: Input shadow from another buffer in softing pass, for better quailty. Trying to improve shadow softing today. Finished the improvement. Fixed GUI resizing as well.
Redone the shadow attenuation calculation.

30-08-2023: Merge ray tracing shadow result buffers. It should only need one RT now.

31-08-2023: Implemented BC4/BC5 compression successfully. Applied BC5 unpack in the shader code as well. Make point light atten noise better.

08-09-2023: Started adding world editor. The first goal is to display the debug info of components and be able to jump to the object by double clicking.

10-09-2023: Added camera teleport when double-clicking an object in world editor.

11-09-2023: Draw boundary for components successfully. Now it supports box and sphere.

12-09-2023: Started adding detail view editor. Started adding transform detail view.

13-09-2023: Started syncing transform detail view values. Finished transform detail view. Organized build macro as predefined. Now there are only WITH_EDITOR and WITH_RELEASE.
Started adding detail GUI class as well, simply wrapped annoying GUI code.

14-09-2023: Started adding simple reflection system, it at least let me get member/type in class. By using reflection, detail GUI can be simpler to do.
Now the detail view implementation is good enough. I can carry on the other details.

16-09-2023: Started adding detail GUI for other components. Applied detail views to all components except the mesh renderer.

17-09-2023: Started adding GUI for mesh component. At least make it choose visibility and referencing meshes/materials for now.
Added some engine definitions for some types. The next is to solve the syncing issue of detail GUIs.
Also fixed the light attenuation noise artifact when the point light radius is small.
Next is to deal with the change of material from a mesh renderer. The shader needs to be reinitialized.

18-09-2023: Fulfilled the material detail view selection behavior. Refactored the material shader codes in PrepareRenderingShaders(), reuse a few code at least.

19-09-2023: Added constrainted render output. It looks better when resizing window. This won't work in fullscreen mode of course.

20-09-2023: Better named the UHGraphNodeType and UHGraphPinType enum. Organized material parameter collection in MaterialNode class.
Applied the new data structured for RT material data, this should also be good for compile-free parameters.
Tried to work on compile-free for parameter changes, but the edit control somehow didn't send the message. So I use the update method, better than nothing.
Completed the compile-free parameter nodes, but RT material data can be improved. Finished multiple output nodes support as well!
Another huge change today, I managed to fix some dangling objects issue too.

21-09-2023: Gave a very low cutoff value in translucent motion pass, so if a tranclusent object has low opacity can still receive the light.
Fixed a minor bug of swap chain clear value. Started adding HDR support (not tested yet)

22-09-2023: Corrected and finalized the HDR implementation.

25-09-2023: Started implementing spot light component. Extended to tiled-base culling. Started applying spot light to deferred lighting.

28-09-2023: Fixed the first-chance transform error. Added a flag to update the PrevWorldMatrix in case the static meshes miss this info.
Removed all "Padding" variables in StructuredBuffer, they're not needed in modern GPU.
Applied spot light calculation to deferred pass. Applied spot light to translucent as well.

29-09-2023: Applied spot light RT shadows too. Runtime spot light is almost done, the next is to expose editor stuffs.
Fixed the attenuation in RT shadow shader. Finished the spot light editor stuffs.

09-10-2023: Rename graph builder as render builder. Start bringing ImGui library. Alternate all "VK_NULL_HANDLE" to nullptr.
For ImGui, the swapchain behavior is changed. I can now show the demo window, but it will spam vk error if it's outside the window.
After some modifications, showing ImGui won't trigger error.

10-10-2023: Store the swapchain format/colorspace in ImGui Vulkan init info, so the GUI buffer will be consistent as UHE swap chain.
Finished setting dialog ImGui porting.

15-10-2023: Finished profile dialog ImGui porting. Stores all dialogs as pointer instead an instance.
19-10-2023: Finished world dialog ImGui porting. Refactored all -1 to UHINDEXNONE (-1 as well).
Finished detail dialog ImGui porting.
20-10-2023: Finished texture dialog ImGui porting.

23-10-2023: Started the EXR texture import implementation. Organized both Vulkan/FBX SDK to the ThirdParty folder too.
24-10-2023: Added support for EXR images. Let texture editor automatically correct the linear/compression setting consistency.
Two bugs to solve: 
(1) Stack overflow in release editor when importing EXR. (Fixed)
(2) Can't switch after creation. (Fixed)
Removed unnecessary reverse of motion translucent bundles.

25-10-2023: Customized texture formats and replaced most VkFormat parameter as UHTextureFormat.
Merged world and detail GUI and always display it in editor mode. Still need to find a way of hiding resize grip of ImGui window.
Improved release build render thread efficiency.
Started trying the engine on other hardwares. Though it can run on my integrated GPU, but parallel submission is a problem.
BindDescriptor() might be only called once after BeginPass(), need to try this tomorrow.

26-10-2023: Solved parallel submission issue by SetViewport/ScissorRect in the secondary commands, that's necessary.
Still an issue there when BeginRenderPass() is called for MotionOpaquePassObj, the RT gets cleared despite it's LOAD_OP_LOAD!
Looks like it's a first-chance error for AMD integrated GPU, if I skip camera motion draw intentionally, the sky pass result gets cleared...
Now I simply workaround the issue.

27-10-2023: Started to add BC6H compression. Got a preliminary result, I should be close to the proper implemenation.

28-10-2023: Finished BC6H compression.
29-10-2023: Spotted stupid typos in the texture compressor, fixed it lol. Also used higher thread count for compression.
Still trying the mode 10 of BC6H, have not succeed yet. After a few considerations, I think trying mode 14 might be better.
Finished the experient of mode 14, the delta precision is too low and it's almost like choosing one end point only!
Next is to try: mode 13 or dynamically select mode 11 and 14 or check the max diff in a block search and select mode based on it!

30-10-2023: Contined to refine the BC6H compression. Now it selects the mode11~14 based on the max delta between color reference.
Finished high-quality BC6H compression!
31-10-2023: Started adding cubemap editor. Also started adding cubemap asset management.
Now creation, import, and export cubemap works properly. Integrated sky cubemap to skylight component, and removed redundant skybox renderer.

01-11-2023: Refactored shared resources in renderer. Fixed related error after validation layer is back.
Still working on the panorama map to cube map.
02-11-2023: Got some progress on the map conversion. Next is to deal with the seam artifact.
The Y faces still need a better formula... 
Finally correct the formula! Next is to deal with mipmap and compression.

03-11-2023: Mipmap generation and data transfer is done for panorama-to-cubemap creation. Deal with compression next.
Finished texture cube creation from panorama.
04-11-2023: Minor bugfixes for low-end GPU and blog post.

05-11-2023: Added mipmap support for render texture. Fixed all kinds of minor issues when I was playing around texture/cubemap editor.
Added cubemap smoothing shader.
06-11-2023: Started moving texture compression implementation to compute shader. 
Corrected the BC3 color part, I realized it will always go with the color0 <= color1 case...That makes point search useless and I have to use min/max color.
Also corrected a path bug when compiling shader. By far, BC1~BC5 are already on compute shader!

07-11-2023: Moved BC6H implementation to the compute shader as well.
12-11-2023: Minor change to TAA. Fixed a thread bug in release build when app is closing.
13-11-2023: Expose enable flag for component class. All components including game script should be able to toggle now.
Fixed light list buffer for translucent objects, I gave the wrong buffer when organizing rendering resource before.
Merged a few multiple ResourceBarrier calls into one. Started adding information dialog (the editor section at the bottom of main window). Finished adding output log window.

14-11-2023: Started the implementation of component save/load. Fixed a material compilation bug when it's resaving.
Did a few refactorings in UHScene class, it's ready for save/load implementation.
15-11-2023: Implemented scene save feature, now it can save scene as .uhscene asset.
16-11-2023: Kicked off scene load feature. Made mesh asset store the UHObject stuff too.
Started removing all request function that takes a variable directly, it's dangerous and not consistent.
Scene load feature is done. But whole workflow could be improved.

17-11-2023: Started the mesh editor implemenation. The preview scene needs to be refined.
18-11-2023: Refactored resource barrier and begin render pass function so that they can store the latest image layout in texture class.
This makes auto-transition behavior easier. Addressed a few more issues for low-end PC too.

19-11-2023: Fixed the async compute bug for RTX 3000 series GPU. Minor object reference fix in mesh renderer.
Finished adding mesh preview rendering.
20-11-2023: Added fbx import workflow in mesh editor. But I need to deal with the overwriting behavior.
Added roughness texture import too (ShininessExponent texture type in FBX import).
Finished fbx import editor. But auto generating mesh renderer has not done yet.

21-11-2023: Finished adding auto generation of mesh renderer after import a fbx.
Enchanced the material shader naming and compiling safety.
23-11-2023: Organized a few defines in new UHLightCommon.hlsli. It's not a good idea to put all defines in the same file after all.
Refactored request render buffer funtion, it now creates resource at the same time when requesting it.
Tweaked TAA again. Prevented duplicated destroy of descriptor pool in shader class.

24-11-2023: Refactored a few release workflow and removed a few .reset() calls. Added SH9 generation pass to rendering pipeline.
Next is to actually apply it to rendering.
26-11-2023: Applied SH9 lighting to object pass. Which works great! Reverted dtor release behavior, that's dangerous.
Moved all GPU time scope to the top of function, made it more sense.

29-11-2023: Minor fix for resource barrier, I forgot clearing the list after calling flush resource barrier!
Fixed async compute issue again by adding compute shader bit for the wait semaphore.
01-12-2023: Minor improvements that includes using _UNORM for miprate instead, moving velocity calculation to vertex shader
, and enhanced async compute again (start thinking it could be driver issue).