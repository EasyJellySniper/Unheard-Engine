14-01-2024: 
Add gaussian blur pass. The next is to try half-sized blurring or even quarter-sized if performance issue is there.
15-01-2024: 
Make gaussian blur calculate at lower resolution (not just half-sized).
Also corrected a few performance profiles.

19-01-2024: 
Fixed the wrong tone map data array size. Made min image count follow GMaxFrameInFlight value.
Removed the PresentWait and PresentId usage. They caused a high cpu usage.
21-01-2024: 
Started adding refraction material parameter and binding refraction textures.
Next is to do refraction calculation.

25-01-2024: 
Started adding refraction calculation. But the blurred scene quality is too low IMO.
Next is to try a higher resolution blurred scene with a lower blur radius.
Fixed the material buffer size issue when the parameter changes.
Input guard for all other editor dialogs.

27-01-2024: 
Continue implementing the refraction material. First version of refraction material is done. Looks solid!
Also pushed constants to blur shader successfully, saved constant buffer creation.
29-01-2024: 
Slightly improved refraction. Prevent distant pixels from being distorted too much.

30-01-2024:
Refactored gaussian filter code. Also removed the parallel submission setting in editor and force the parallel submission. Not seeing a reason to disable it.
Figured out a way to refract translucent objects in a translucent object, with some limitations though.
Next is to test whether mipmap can be used for lower the flickering of blurred image or just linear upscaling.

31-01-2024:
Nope, no way to improve blurred image unless rising the resolution.
Removed various shader macro define, and used dynamic branch with constant value in shader instead.
Reduced a few shader variants!

07-02-2024:
Minor improvement for FPS limiter. Reduced CPU usage.
08-02-2024:
Improved FPS limiter again. Created another thread for the wait operation.
Also mixed the method of sleep and while loop waiting.
09-02-2024:
Fixup the NTSC frequencies when engine is caching monitor Hz value.

16-02-2024:
Minor change to refraction blur. Also fixed the compile issue, now it set renderer dirties anyway as long as refresh material shader is called.

19-02-2024:
Organized the descriptor in RT shadow shader.
Fixed the bool parameter bug, I should bind the integer instead.
Optimized both RT shadow and soft shadow shader, they should only need one iteration.

20-02-2024:
Refactored material input compilation.
Added translucent bump and roughness output. It should be ready for RT reflection now.
Removed half depth buffer, better to just search neighbor pixels in shader.

25-02-2024:
Started RT reflection implementation. Added more resource bindings in RT hit group shader.
I've not added the rendering pass for RT reflection yet. Did the shader part first.

26-02-2024:
Tried mailbox mode if it's available. Used R11G11B10 for RT shared texture instead.
Tested the RT reflection compilation was fine. I'll add the rendering pass for it.
Added rendering pass for RT reflection without issues.

01-03-2024:
Expose RT reflection debug view mode.
03-03-2024:
Continue the RT reflection implementation. 
Organized sampler index into system constant buffer, so some shaders do not need to bind extra samplerstate and can reuse it from UHSamplerTable.
Fixed a minor bug regarding material buffer size, now it always checks the size before saving it.
Finished the material fetching in RT reflection, the next to do is lighting calculation or deal with translucent material.

15-03-2024:
Added emissive material for RT as well. Refactored the shader material input code.
Reverted the visual studio update that caused garbage file issue, thank you Microsoft! 
Recorded the VS version in SDK dependency.txt too.

17-03-2024:
Continued RT reflection. Applied lighting if the hit position is inside the screen.
Need to make point/spot light receiving work when a hit position is outside the screen.

18-03-2024:
It can now receive the lighting for a hit position outside of screen.
Lighting is basically done except the shadow mask for the hit position outside the screen.

24-03-2024:
Deal with translucent object in RT reflection!
Also try to deal with the refraction in reflection, but it's still an issue for the pixel outside the screen.
For now, simply use the mirror repeat trick.

25-03-2024:
Try applying temporal tracing for reflection.
Performance does improve, but the result also looks "laggy"

26-03-2024:
Added temporal history sampling for RT reflection.
It looks smooth when mouse moving, but stuttering with keyboard.
It was a failure lol, I forgot that motion vector couldn't be used for reflected result...
I'll try a different method tomorrow. Also default fresnel parameter as 0 instead of 1.

27-03-2024:
Reverted the history sampling in RT reflection.
Fixed a stupid channel bug when sampling translucent smoothness.
Added the half pixels method again. Next is to actually apply the reflection to object, and also add quality setting for RT reflection.

28-03-2024:
Expose RT reflection quality settings.
Done adding the quality setting for the RT reflection.

30-03-2024:
Minor shader code refactor. Minor optimized refraction calc.
Next is to reorganize the rendering pipeline, expected order: RT shadow -> Light pass -> Opaque screenshot -> RT reflection -> Render reflection

31-03-2024:
Added the reflection pass. But there is another egg-chicken problem lol. 
So giving up 'translucent in refraction' now. I'll revisit it in the future.
Did some material data packing as well. And the reflection mipmaps for low smoothness.

01-04-2024:
Refine the RT reflection with high roughness. I probably want to apply gaussian blur to low mips (<2) in case of ugly box-artifact.
Done the blur for the RT reflection mips, much better result! Next is to deal with env & RT reflection composite.

02-04-2024:
Improved reflection composite! It looks better now.
Finalized RT reflection implementation.

05-04-2024:
Refactored all plain enums as enum classes.

07-04-2024:
Code refactor for material properties. UHMaterialProperty is now only an intermediary struct and temporarily used in fbx import.
Removed reflection factor node too.

14-04-2024:
Add a reflection strength parameter for scaling the intensity of reflection.
Refactor the way to read data from ini.

17-04-2024:
Fixed a subtle bug in RT hit group shader. It didn't properly cancel a flag since HLSL considers macro defined integer as signed.
Casting to uint solves the issue. Also exposed the cutoff value in material editor.
Now, only opaque object can reach closest shader. So I removed the redundant check there.

23-04-2024:
Enable /MP compile flag for faster compilation in project.
Add dirty state hint for materials.

28-04-2024:
Refactored light culling parameters.
Added a few more shader includes in case they're changed but not compiled.

04-05-2024:
Optimized shader loading time. From 2 seconds to 0.2 seconds with cache!
Recreating RT material is the next to be optimized.
Find that GVkCreateRayTracingPipelinesKHR is the one that costs too much time.
Optimized RT shaders by async creation. Though this makes RT show up later.

05-05-2024:
Finished optimizing RT shader creation.
Optimized the texture reference check too, from 1.5 seconds to 0.04 seconds!

18-05-2024:
Started implementing occlusion query. The execution time of getting back result is far faster than I expected.
Also started organizing the setting apply, aim for no-relaunch-apply when setting changed.

19-05-2024:
Made depth prepass toggable in flight.

26-05-2024:
Support scoped CPU timing. Optimized occlusion query reset time.
I think occlusion query is done. But the perf gain isn't bigger than it costs, also one-frame delay is obvious.
Need a few more works.

27-05-2024:
Finished the HW occlusion query. Despite it didn't benefit much in current scene. Default as disabled now.

28-05-2024:
Refactored those ugly global tables in the UHShaderClass. Made it simpler.

09-06-2024:
Vulkan SDK upgrade for mesh shaders. (1.3.283.0)
Fixed up a few validation errors and bugs after upgrading.

11-06-2024:
Started adding meshlet data structures.
Also considering if I can reuse the mesh table layouts from RT for mesh shader.

13-06-2024:
Fixed the state recreation bug. Added a reference count method before release/erase a state record.

23-06-2024:
Implemented base amplification shader and depth mesh shader.
Reorganzied mesh tables, they can be used in mesh shader too.
Next is to create pipeline state with AS/MS in Vulkan.

13-07-2024:
Upgrade DXC and make AS/MS compilation work.
Add "-HV 2018" for compatibility, too much place to maintain with 2021 as default.
Add -fspv-extension=SPV_EXT_mesh_shader and -fspv-extension=SPV_EXT_descriptor_indexing so the implementation knows to use EXT mesh shader instead of NV.
Should I switch object constant to storage buffer depends on how it progresses.

14-07-2024:
Prepare works for mesh shader constants. Refactored object casting functions.
I shouldn't just use static_cast for UHObject! Next thing to do is organizing instances and dispatch mesh!

21-07-2024:
Organized AS/MS parameters for material. Removed IA stage input when mesh shader is applied.
Ready to organize renderer instances after culling / sorting.

25-07-2024:
Finished collecting the mesh shader instances, it's ready for the dispatch.
I find I can also replace the unordered_map by vector for shaders.
Not sure why I thought the map is better before? I should always use vector if the access index always starts at 0.
And only use map for lookup.

30-07-2024:
Enabled /fp:fast. Replaced intro sort by custom counting sort for renderers.
Next, I shall be able to merge the renderer instance used for both RT and mesh shader.

01-08-2024:
Merged the renderer instance structure for RT and mesh shader.
Next let me check if we can bind the renderer instance in flight instead of creating another buffer.

02-08-2024:
Refactor the data binding for depth mesh shader.

03-08-2024:
Got progression for the mesh shader! At least it can render properly when meshlet number is 1.
Still need to figure out why the multiple meshlet not working well.
My theory is the vertex list and primitive list must match, so let me refactor the why to split meshlet tomorrow.

04-08-2024:
Finally, I got the proper depth mesh shader! But there is a chance to have flickering for distant objects.
I'll check if it's caused by the MS or something else.
Find the reason...it seems I must upload all data in a buffer or bind exactly the same amount. Though it doesn't make sense..
lol, found the cause. I stupidly set the wrong descriptor.

05-08-2024:
Still added the shader define in vertex input for the minimal IA bound. This brings back a few shader variants but worthy.
Also removed redundant skycube binding in base shader, as there is another pass for reflection already.
Implemented base mesh shader too! Reduced lots of draw calls.
Ta! Applied mesh shader for the motion vector passes as well. Now it's almost done. Translucent pass is the only one that can't be batched.
Added more CPU scope time in profile dialog. Cached gaussian constants for use.
Next is to deal with the editor behavior of mesh shaders or make it work with occlusion query.